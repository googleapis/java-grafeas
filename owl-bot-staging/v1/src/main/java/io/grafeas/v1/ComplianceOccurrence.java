// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grafeas/v1/compliance.proto

package io.grafeas.v1;

/**
 * <pre>
 * An indication that the compliance checks in the associated ComplianceNote
 * were not satisfied for particular resources or a specified reason.
 * </pre>
 *
 * Protobuf type {@code grafeas.v1.ComplianceOccurrence}
 */
public final class ComplianceOccurrence extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:grafeas.v1.ComplianceOccurrence)
    ComplianceOccurrenceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ComplianceOccurrence.newBuilder() to construct.
  private ComplianceOccurrence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ComplianceOccurrence() {
    nonCompliantFiles_ = java.util.Collections.emptyList();
    nonComplianceReason_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ComplianceOccurrence();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ComplianceOccurrence(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              nonCompliantFiles_ = new java.util.ArrayList<io.grafeas.v1.NonCompliantFile>();
              mutable_bitField0_ |= 0x00000001;
            }
            nonCompliantFiles_.add(
                input.readMessage(io.grafeas.v1.NonCompliantFile.parser(), extensionRegistry));
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            nonComplianceReason_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        nonCompliantFiles_ = java.util.Collections.unmodifiableList(nonCompliantFiles_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.grafeas.v1.Compliance.internal_static_grafeas_v1_ComplianceOccurrence_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.grafeas.v1.Compliance.internal_static_grafeas_v1_ComplianceOccurrence_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.grafeas.v1.ComplianceOccurrence.class, io.grafeas.v1.ComplianceOccurrence.Builder.class);
  }

  public static final int NON_COMPLIANT_FILES_FIELD_NUMBER = 2;
  private java.util.List<io.grafeas.v1.NonCompliantFile> nonCompliantFiles_;
  /**
   * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.grafeas.v1.NonCompliantFile> getNonCompliantFilesList() {
    return nonCompliantFiles_;
  }
  /**
   * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.grafeas.v1.NonCompliantFileOrBuilder> 
      getNonCompliantFilesOrBuilderList() {
    return nonCompliantFiles_;
  }
  /**
   * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
   */
  @java.lang.Override
  public int getNonCompliantFilesCount() {
    return nonCompliantFiles_.size();
  }
  /**
   * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
   */
  @java.lang.Override
  public io.grafeas.v1.NonCompliantFile getNonCompliantFiles(int index) {
    return nonCompliantFiles_.get(index);
  }
  /**
   * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
   */
  @java.lang.Override
  public io.grafeas.v1.NonCompliantFileOrBuilder getNonCompliantFilesOrBuilder(
      int index) {
    return nonCompliantFiles_.get(index);
  }

  public static final int NON_COMPLIANCE_REASON_FIELD_NUMBER = 3;
  private volatile java.lang.Object nonComplianceReason_;
  /**
   * <code>string non_compliance_reason = 3;</code>
   * @return The nonComplianceReason.
   */
  @java.lang.Override
  public java.lang.String getNonComplianceReason() {
    java.lang.Object ref = nonComplianceReason_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      nonComplianceReason_ = s;
      return s;
    }
  }
  /**
   * <code>string non_compliance_reason = 3;</code>
   * @return The bytes for nonComplianceReason.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNonComplianceReasonBytes() {
    java.lang.Object ref = nonComplianceReason_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      nonComplianceReason_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < nonCompliantFiles_.size(); i++) {
      output.writeMessage(2, nonCompliantFiles_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nonComplianceReason_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, nonComplianceReason_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < nonCompliantFiles_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, nonCompliantFiles_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nonComplianceReason_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, nonComplianceReason_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.grafeas.v1.ComplianceOccurrence)) {
      return super.equals(obj);
    }
    io.grafeas.v1.ComplianceOccurrence other = (io.grafeas.v1.ComplianceOccurrence) obj;

    if (!getNonCompliantFilesList()
        .equals(other.getNonCompliantFilesList())) return false;
    if (!getNonComplianceReason()
        .equals(other.getNonComplianceReason())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getNonCompliantFilesCount() > 0) {
      hash = (37 * hash) + NON_COMPLIANT_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getNonCompliantFilesList().hashCode();
    }
    hash = (37 * hash) + NON_COMPLIANCE_REASON_FIELD_NUMBER;
    hash = (53 * hash) + getNonComplianceReason().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.grafeas.v1.ComplianceOccurrence parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.grafeas.v1.ComplianceOccurrence parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.grafeas.v1.ComplianceOccurrence prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An indication that the compliance checks in the associated ComplianceNote
   * were not satisfied for particular resources or a specified reason.
   * </pre>
   *
   * Protobuf type {@code grafeas.v1.ComplianceOccurrence}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:grafeas.v1.ComplianceOccurrence)
      io.grafeas.v1.ComplianceOccurrenceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.grafeas.v1.Compliance.internal_static_grafeas_v1_ComplianceOccurrence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.grafeas.v1.Compliance.internal_static_grafeas_v1_ComplianceOccurrence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.grafeas.v1.ComplianceOccurrence.class, io.grafeas.v1.ComplianceOccurrence.Builder.class);
    }

    // Construct using io.grafeas.v1.ComplianceOccurrence.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getNonCompliantFilesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (nonCompliantFilesBuilder_ == null) {
        nonCompliantFiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        nonCompliantFilesBuilder_.clear();
      }
      nonComplianceReason_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.grafeas.v1.Compliance.internal_static_grafeas_v1_ComplianceOccurrence_descriptor;
    }

    @java.lang.Override
    public io.grafeas.v1.ComplianceOccurrence getDefaultInstanceForType() {
      return io.grafeas.v1.ComplianceOccurrence.getDefaultInstance();
    }

    @java.lang.Override
    public io.grafeas.v1.ComplianceOccurrence build() {
      io.grafeas.v1.ComplianceOccurrence result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.grafeas.v1.ComplianceOccurrence buildPartial() {
      io.grafeas.v1.ComplianceOccurrence result = new io.grafeas.v1.ComplianceOccurrence(this);
      int from_bitField0_ = bitField0_;
      if (nonCompliantFilesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          nonCompliantFiles_ = java.util.Collections.unmodifiableList(nonCompliantFiles_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.nonCompliantFiles_ = nonCompliantFiles_;
      } else {
        result.nonCompliantFiles_ = nonCompliantFilesBuilder_.build();
      }
      result.nonComplianceReason_ = nonComplianceReason_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.grafeas.v1.ComplianceOccurrence) {
        return mergeFrom((io.grafeas.v1.ComplianceOccurrence)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.grafeas.v1.ComplianceOccurrence other) {
      if (other == io.grafeas.v1.ComplianceOccurrence.getDefaultInstance()) return this;
      if (nonCompliantFilesBuilder_ == null) {
        if (!other.nonCompliantFiles_.isEmpty()) {
          if (nonCompliantFiles_.isEmpty()) {
            nonCompliantFiles_ = other.nonCompliantFiles_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureNonCompliantFilesIsMutable();
            nonCompliantFiles_.addAll(other.nonCompliantFiles_);
          }
          onChanged();
        }
      } else {
        if (!other.nonCompliantFiles_.isEmpty()) {
          if (nonCompliantFilesBuilder_.isEmpty()) {
            nonCompliantFilesBuilder_.dispose();
            nonCompliantFilesBuilder_ = null;
            nonCompliantFiles_ = other.nonCompliantFiles_;
            bitField0_ = (bitField0_ & ~0x00000001);
            nonCompliantFilesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getNonCompliantFilesFieldBuilder() : null;
          } else {
            nonCompliantFilesBuilder_.addAllMessages(other.nonCompliantFiles_);
          }
        }
      }
      if (!other.getNonComplianceReason().isEmpty()) {
        nonComplianceReason_ = other.nonComplianceReason_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.grafeas.v1.ComplianceOccurrence parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.grafeas.v1.ComplianceOccurrence) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<io.grafeas.v1.NonCompliantFile> nonCompliantFiles_ =
      java.util.Collections.emptyList();
    private void ensureNonCompliantFilesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        nonCompliantFiles_ = new java.util.ArrayList<io.grafeas.v1.NonCompliantFile>(nonCompliantFiles_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.grafeas.v1.NonCompliantFile, io.grafeas.v1.NonCompliantFile.Builder, io.grafeas.v1.NonCompliantFileOrBuilder> nonCompliantFilesBuilder_;

    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public java.util.List<io.grafeas.v1.NonCompliantFile> getNonCompliantFilesList() {
      if (nonCompliantFilesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(nonCompliantFiles_);
      } else {
        return nonCompliantFilesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public int getNonCompliantFilesCount() {
      if (nonCompliantFilesBuilder_ == null) {
        return nonCompliantFiles_.size();
      } else {
        return nonCompliantFilesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public io.grafeas.v1.NonCompliantFile getNonCompliantFiles(int index) {
      if (nonCompliantFilesBuilder_ == null) {
        return nonCompliantFiles_.get(index);
      } else {
        return nonCompliantFilesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public Builder setNonCompliantFiles(
        int index, io.grafeas.v1.NonCompliantFile value) {
      if (nonCompliantFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNonCompliantFilesIsMutable();
        nonCompliantFiles_.set(index, value);
        onChanged();
      } else {
        nonCompliantFilesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public Builder setNonCompliantFiles(
        int index, io.grafeas.v1.NonCompliantFile.Builder builderForValue) {
      if (nonCompliantFilesBuilder_ == null) {
        ensureNonCompliantFilesIsMutable();
        nonCompliantFiles_.set(index, builderForValue.build());
        onChanged();
      } else {
        nonCompliantFilesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public Builder addNonCompliantFiles(io.grafeas.v1.NonCompliantFile value) {
      if (nonCompliantFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNonCompliantFilesIsMutable();
        nonCompliantFiles_.add(value);
        onChanged();
      } else {
        nonCompliantFilesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public Builder addNonCompliantFiles(
        int index, io.grafeas.v1.NonCompliantFile value) {
      if (nonCompliantFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNonCompliantFilesIsMutable();
        nonCompliantFiles_.add(index, value);
        onChanged();
      } else {
        nonCompliantFilesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public Builder addNonCompliantFiles(
        io.grafeas.v1.NonCompliantFile.Builder builderForValue) {
      if (nonCompliantFilesBuilder_ == null) {
        ensureNonCompliantFilesIsMutable();
        nonCompliantFiles_.add(builderForValue.build());
        onChanged();
      } else {
        nonCompliantFilesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public Builder addNonCompliantFiles(
        int index, io.grafeas.v1.NonCompliantFile.Builder builderForValue) {
      if (nonCompliantFilesBuilder_ == null) {
        ensureNonCompliantFilesIsMutable();
        nonCompliantFiles_.add(index, builderForValue.build());
        onChanged();
      } else {
        nonCompliantFilesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public Builder addAllNonCompliantFiles(
        java.lang.Iterable<? extends io.grafeas.v1.NonCompliantFile> values) {
      if (nonCompliantFilesBuilder_ == null) {
        ensureNonCompliantFilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nonCompliantFiles_);
        onChanged();
      } else {
        nonCompliantFilesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public Builder clearNonCompliantFiles() {
      if (nonCompliantFilesBuilder_ == null) {
        nonCompliantFiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        nonCompliantFilesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public Builder removeNonCompliantFiles(int index) {
      if (nonCompliantFilesBuilder_ == null) {
        ensureNonCompliantFilesIsMutable();
        nonCompliantFiles_.remove(index);
        onChanged();
      } else {
        nonCompliantFilesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public io.grafeas.v1.NonCompliantFile.Builder getNonCompliantFilesBuilder(
        int index) {
      return getNonCompliantFilesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public io.grafeas.v1.NonCompliantFileOrBuilder getNonCompliantFilesOrBuilder(
        int index) {
      if (nonCompliantFilesBuilder_ == null) {
        return nonCompliantFiles_.get(index);  } else {
        return nonCompliantFilesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public java.util.List<? extends io.grafeas.v1.NonCompliantFileOrBuilder> 
         getNonCompliantFilesOrBuilderList() {
      if (nonCompliantFilesBuilder_ != null) {
        return nonCompliantFilesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(nonCompliantFiles_);
      }
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public io.grafeas.v1.NonCompliantFile.Builder addNonCompliantFilesBuilder() {
      return getNonCompliantFilesFieldBuilder().addBuilder(
          io.grafeas.v1.NonCompliantFile.getDefaultInstance());
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public io.grafeas.v1.NonCompliantFile.Builder addNonCompliantFilesBuilder(
        int index) {
      return getNonCompliantFilesFieldBuilder().addBuilder(
          index, io.grafeas.v1.NonCompliantFile.getDefaultInstance());
    }
    /**
     * <code>repeated .grafeas.v1.NonCompliantFile non_compliant_files = 2;</code>
     */
    public java.util.List<io.grafeas.v1.NonCompliantFile.Builder> 
         getNonCompliantFilesBuilderList() {
      return getNonCompliantFilesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.grafeas.v1.NonCompliantFile, io.grafeas.v1.NonCompliantFile.Builder, io.grafeas.v1.NonCompliantFileOrBuilder> 
        getNonCompliantFilesFieldBuilder() {
      if (nonCompliantFilesBuilder_ == null) {
        nonCompliantFilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.grafeas.v1.NonCompliantFile, io.grafeas.v1.NonCompliantFile.Builder, io.grafeas.v1.NonCompliantFileOrBuilder>(
                nonCompliantFiles_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        nonCompliantFiles_ = null;
      }
      return nonCompliantFilesBuilder_;
    }

    private java.lang.Object nonComplianceReason_ = "";
    /**
     * <code>string non_compliance_reason = 3;</code>
     * @return The nonComplianceReason.
     */
    public java.lang.String getNonComplianceReason() {
      java.lang.Object ref = nonComplianceReason_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nonComplianceReason_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string non_compliance_reason = 3;</code>
     * @return The bytes for nonComplianceReason.
     */
    public com.google.protobuf.ByteString
        getNonComplianceReasonBytes() {
      java.lang.Object ref = nonComplianceReason_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nonComplianceReason_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string non_compliance_reason = 3;</code>
     * @param value The nonComplianceReason to set.
     * @return This builder for chaining.
     */
    public Builder setNonComplianceReason(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      nonComplianceReason_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string non_compliance_reason = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearNonComplianceReason() {
      
      nonComplianceReason_ = getDefaultInstance().getNonComplianceReason();
      onChanged();
      return this;
    }
    /**
     * <code>string non_compliance_reason = 3;</code>
     * @param value The bytes for nonComplianceReason to set.
     * @return This builder for chaining.
     */
    public Builder setNonComplianceReasonBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      nonComplianceReason_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:grafeas.v1.ComplianceOccurrence)
  }

  // @@protoc_insertion_point(class_scope:grafeas.v1.ComplianceOccurrence)
  private static final io.grafeas.v1.ComplianceOccurrence DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.grafeas.v1.ComplianceOccurrence();
  }

  public static io.grafeas.v1.ComplianceOccurrence getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ComplianceOccurrence>
      PARSER = new com.google.protobuf.AbstractParser<ComplianceOccurrence>() {
    @java.lang.Override
    public ComplianceOccurrence parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ComplianceOccurrence(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ComplianceOccurrence> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ComplianceOccurrence> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.grafeas.v1.ComplianceOccurrence getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

